

// IMPORTANT: ELEGOO_TFTLCD LIBRARY MUST BE SPECIFICALLY
// CONFIGURED FOR EITHER THE TFT SHIELD OR THE BREAKOUT BOARD.
// SEE RELEVANT COMMENTS IN Elegoo_TFTLCD.h FOR SETUP.
//Technical support:goodtft@163.com

#include <Elegoo_GFX.h>    // Core graphics library
#include <Elegoo_TFTLCD.h> // Hardware-specific library
#include <stdlib.h>

// The control pins for the LCD can be assigned to any digital or
// analog pins...but we'll use the analog pins as this allows us to
// double up the pins with the touch screen (see the TFT paint example).
#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0

#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

// When using the BREAKOUT BOARD only, use these 8 data lines to the LCD:
// For the Arduino Uno, Duemilanove, Diecimila, etc.:
//   D0 connects to digital pin 8  (Notice these are
//   D1 connects to digital pin 9   NOT in order!)
//   D2 connects to digital pin 2
//   D3 connects to digital pin 3
//   D4 connects to digital pin 4
//   D5 connects to digital pin 5
//   D6 connects to digital pin 6
//   D7 connects to digital pin 7
// For the Arduino Mega, use digital pins 22 through 29
// (on the 2-row header at the end of the board).

// Assign human-readable names to some common 16-bit color values:
#define  BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Elegoo_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
// If using the shield, all control and data lines are fixed, and
// a simpler declaration can optionally be used:
// Elegoo_TFTLCD tft;

const int delay1 = 2;
const int delay2 = 4;
unsigned tempRaw = 30;
unsigned char temp[2] = {(tempRaw*0.75+5)/10, (int)(tempRaw*0.75+5)%10};
unsigned char* tempCorrected = &temp[0];
unsigned sysPressRaw = 90;
unsigned char sysP[3] = {(9+2*sysPressRaw)/100, (int)(9+2*sysPressRaw)%100/10, (int)(9+2*sysPressRaw)%10 }; 
unsigned char *sysPressCorrected = &sysP[0];

unsigned char*  diasPressCorrected, pulseRateCorrected;

unsigned short battery;
unsigned char bpOutofRange, tempOutOfRange, pulseOutOfRange;
bool bpHigh, tempHigh, pulseLow;
  
void setup(void) {
  Serial.begin(9600);
  Serial.println(F("TFT LCD test"));


#ifdef USE_Elegoo_SHIELD_PINOUT
  Serial.println(F("Using Elegoo 2.4\" TFT Arduino Shield Pinout"));
#else
  Serial.println(F("Using Elegoo 2.4\" TFT Breakout Board Pinout"));
#endif

  Serial.print("TFT size is "); Serial.print(tft.width()); Serial.print("x"); Serial.println(tft.height());

  tft.reset();

   uint16_t identifier = tft.readID();
   if(identifier == 0x9325) {
    Serial.println(F("Found ILI9325 LCD driver"));
  } else if(identifier == 0x9328) {
    Serial.println(F("Found ILI9328 LCD driver"));
  } else if(identifier == 0x4535) {
    Serial.println(F("Found LGDP4535 LCD driver"));
  }else if(identifier == 0x7575) {
    Serial.println(F("Found HX8347G LCD driver"));
  } else if(identifier == 0x9341) {
    Serial.println(F("Found ILI9341 LCD driver"));
  } else if(identifier == 0x8357) {
    Serial.println(F("Found HX8357D LCD driver"));
  } else if(identifier==0x0101)
  {     
      identifier=0x9341;
       Serial.println(F("Found 0x9341 LCD driver"));
  }
  else if(identifier==0x1111)
  {     
      identifier=0x9328;
       Serial.println(F("Found 0x9328 LCD driver"));
  }
  else {
    Serial.print(F("Unknown LCD driver chip: "));
    Serial.println(identifier, HEX);
    Serial.println(F("If using the Elegoo 2.8\" TFT Arduino shield, the line:"));
    Serial.println(F("  #define USE_Elegoo_SHIELD_PINOUT"));
    Serial.println(F("should appear in the library header (Elegoo_TFT.h)."));
    Serial.println(F("If using the breakout board, it should NOT be #defined!"));
    Serial.println(F("Also if using the breakout, double-check that all wiring"));
    Serial.println(F("matches the tutorial."));
    identifier=0x9328;
  
  }
  tft.begin(identifier);
}

  int i=0; 
  int t=0;                           
  char AB[2] = {65, 66};
  char CD[2] = {67, 68};

void overall(char toDisplay[], int timeDelay){
  tft.print(toDisplay[0]);
  tft.print(toDisplay[1]);
  delay(1000*timeDelay);
//  tft.setCursor(0, 0);
//  tft.print("  ");
  delay(1000*timeDelay);
  }

void erase(int timeDelay){
   tft.setCursor(0,0);
   tft.setTextColor(BLACK);
   tft.print(AB[0]);
   tft.print(AB[1]);   
   delay(1000*timeDelay);
  }

void loop(void) 
{
//  itoa(tempRaw*0.75+5, temp, 10);
  tft.fillScreen(BLACK);
  unsigned long start = micros();
  tft.setCursor(0, 0);

  tft.setTextColor(GREEN); 
  tft.setTextSize(2);
  tft.print("Temperature:");
  tft.setCursor(0,20);
  tft.print(* (tempCorrected));
  tft.print(* (tempCorrected+1));
  tft.setCursor(0,40);
  tft.print("Systolic pressure:");
  tft.print(* (sysPressCorrected));
  tft.print(* (sysPressCorrected+1));
  tft.print(* (sysPressCorrected+2));



  tft.print("Diastolic pressure:");
  tft.setCursor(0,60);
  tft.print("Pulse rate:");
  tft.setCursor(0,80);
  tft.print("Battery:");
  delay(3000);
  }
